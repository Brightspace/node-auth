'use strict';

const assert = require('chai').assert;

const RedisPublicKeyStore = require('..');
const clock = require('../src/clock');

function createRedisClient(opts) {
	const redis = require('redis');
	const client = redis.createClient({
		url: opts.url,
		prefix: opts.prefix,
		password: opts.password
	});
	client.on('error', e => { throw e; });

	return client;
}

describe('RedisPublicKeyStore', () => {
	const expectedPublicKey = 'TestPublicKey';
	const expiryTime = clock() + 10000;
	const oldExpiryTime = clock() - 10000;

	let client;
	let Provisioner;
	before(() => {
		client = createRedisClient({});
		Provisioner = new RedisPublicKeyStore(client);
	});
	after(() => {
		client.quit();
	});

	afterEach(() => {
		// TODO: Delete previous keys
	});

	it('stores the public key', () => {
		return Provisioner._storePublicKey(expectedPublicKey, expiryTime)
			.then(() => {
				return Provisioner._lookupPublicKeys();
			})
			.then(retrievedKeys => {
				// Rather than checking for equality, assert that expectedPublicKey is in the returned array.
				// The contents of the array are not guaranteed, and may contain actual keys. The same applies for the test below.
				assert.include(retrievedKeys, expectedPublicKey);
			});
	});

	it('returns an empty array when the key expiryTime is too old', () => {
		return Provisioner._storePublicKey(expectedPublicKey, oldExpiryTime)
			.then(() => {
				return Provisioner._lookupPublicKeys();
			})
			.then(retrievedKeys => {
				assert.notInclude(retrievedKeys, expectedPublicKey);
			});
	});

});
