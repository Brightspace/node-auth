'use strict';

const uuid = require('uuid/v4');

const AbstractPublicKeyStore = require('./abstract-public-key-store');
const clock = require('./clock');
const ecKeygen = require('./ec-key-generator');
const rsaKeygen = require('./rsa-key-generator');

const SIGNING_KEY_TYPE_RSA = 'RSA';
const SIGNING_KEY_TYPE_EC = 'EC';
const EXPIRY_CLOCK_SKEW = 5 * 60;
const DEFAULT_SIGNING_KEY_AGE = 60 * 60;

class CoreKeyGenerator {
	constructor(opts) {
		if (typeof opts !== 'object') {
			throw new TypeError(`"opts" should be an Object. Got "${typeof opts}".`);
		}

		if (!(opts.publicKeyStore instanceof AbstractPublicKeyStore)) {
			throw new TypeError('"opts.publicKeyStore" should be an implementation of AbstractPublicKeyStore');
		}

		this._publicKeyStore = opts.publicKeyStore;

		switch (opts.signingKeyType) {
			case SIGNING_KEY_TYPE_RSA: {
				this.keygen = rsaKeygen.bind(null, rsaKeygen.normalize(opts.rsa));
				break;
			}
			case SIGNING_KEY_TYPE_EC: {
				this.keygen = ecKeygen.bind(null, ecKeygen.normalize(opts.ec));
				break;
			}
			default: {
				throw new Error(`signingKeyType must be one of: "${SIGNING_KEY_TYPE_RSA}", "${SIGNING_KEY_TYPE_EC}"`);
			}
		}
	}

	async generateNewKey(exp = clock() + DEFAULT_SIGNING_KEY_AGE) {
		const key = await this.keygen(uuid());

		key.jwk.exp = exp + EXPIRY_CLOCK_SKEW;

		await this._publicKeyStore.storePublicKey(key.jwk);

		return key.signingKey;
	}

}

module.exports = CoreKeyGenerator;
