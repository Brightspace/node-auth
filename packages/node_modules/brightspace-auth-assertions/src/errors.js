'use strict';

class InvalidContextError extends Error {
	constructor() {
		super('Invalid Context');

		this.name = this.constructor.name;
		this.status = 403;

		Error.captureStackTrace(this, this.constructor);
	}
}

class InsufficientScopeError extends Error {
	constructor(group, resource, permission) {
		super(`Insufficient scope. Want "${group}:${resource}:${permission}"`);

		this.name = this.constructor.name;
		this.status = 403;

		Error.captureStackTrace(this, this.constructor);
	}
}

class ImpersonationNotAllowedError extends Error {
	constructor(user, actualUser) {
		super(`Impersonation is not allowed, but user (${user}) and actual user (${actualUser}) differ.`);

		this.name = this.constructor.name;
		this.status = 403;

		Error.captureStackTrace(this, this.constructor);
	}
}

class ImpersonationRequiredError extends Error {
	constructor() {
		super('Impersonation is required.');

		this.name = this.constructor.name;
		this.status = 403;

		Error.captureStackTrace(this, this.constructor);
	}
}

module.exports = {
	InvalidContext: InvalidContextError,
	InsufficientScope: InsufficientScopeError,
	ImpersonationNotAllowed: ImpersonationNotAllowedError,
	ImpersonationRequired: ImpersonationRequiredError
};
